/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int i=0;
        ListNode *p,*now1,*now2;

        now1=l1;
        now2=l2;
        i=now1->val+now2->val;
        now1->val=i%10;
        i=i/10;
        while(now1->next!=NULL && now2->next!=NULL)
        {
            now1=now1->next;
            now2=now2->next;
            i=i+now1->val+now2->val;
            now1->val=i%10;
            i=i/10;
        }
        if(now1->next!=NULL)
        {
            while(now1->next!=NULL)
            {
                now1=now1->next;
                i=i+now1->val;
                now1->val=i%10;
                i=i/10;
                //now1=now1->next;
            }
            if(i>0)
            {
                p=(ListNode *)malloc(sizeof(ListNode));//为要插入的节点分配
                //内存空间p指向新插入结点的首地址
                p->val=1;
                p->next=NULL;
                now1->next=p;
            }
            return l1;
        }
        if(now2->next!=NULL)
        {
            while(now2->next!=NULL)
            {
                now2=now2->next;
                i=i+now2->val;
                p=(ListNode *)malloc(sizeof(ListNode));//为要插入的节点分配
                p->val=i%10;
                p->next=NULL;
                now1->next=p;
                now1=p;//!!here
                i=i/10;
                
            }
            if(i>0)
            {
                p=(ListNode *)malloc(sizeof(ListNode));//为要插入的节点分配
                //内存空间p指向新插入结点的首地址
                p->val=1;
                p->next=NULL;
                now1->next=p;
            }
            return l1;            
        }
            if(i>0)
            {
                p=(ListNode *)malloc(sizeof(ListNode));//为要插入的节点分配
                //内存空间p指向新插入结点的首地址
                p->val=1;
                p->next=NULL;
                now1->next=p;
            }
            return l1;  
    }
};