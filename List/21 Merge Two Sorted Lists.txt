/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l2==NULL)
        {return l1;}
        if(l1==NULL)
        {return l2;}
        ListNode *last,*next,*begin;
        last=(ListNode *)malloc(sizeof(ListNode));//为要插入的节点分配
                //内存空间p指向新插入结点的首地址
        last->next=l1;//第一节点前插入要另外考虑
        begin=last;//第一节点前插入要另外考虑
        while(l2!=NULL && l1!=NULL)//这里一个一个插入了……如果分段来插应该会更加高效？
        {
            if(l2->val < l1->val)
            {
                next=l2->next;
                last->next=l2;
                last=l2;//!!
                l2->next=l1;
                l2=next;
            }
            else
            {
                last=l1;
                l1=l1->next;
            }
        }
        if(l2!=NULL)
        {
            last->next=l2;
        }
        return begin->next;//之前那个方法把begin也给挤掉了
    }
};