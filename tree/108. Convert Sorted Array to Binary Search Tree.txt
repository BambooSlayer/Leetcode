/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        TreeNode *p;
        int Len=nums.size();
        int m=Len/2;
        if(Len==0){return NULL;}
     //   else if(Len==1)
     //   {
     //       p=(TreeNode *)malloc(sizeof(TreeNode));//为要插入的节点分配
     //       //内存空间p指向新插入结点的首地址
     //       p->val=nums[0];
     //       return p;
     //   }
        p=(TreeNode *)malloc(sizeof(TreeNode));//为要插入的节点分配
        //内存空间p指向新插入结点的首地址
        p->val=nums[m];
        if(m-1>=0){
        p->left=sortedArrayToBST(nums,0,m-1);}
        else{p->left=NULL;}
        if(Len-1>=m+1){
        p->right=sortedArrayToBST(nums,m+1,Len-1);}
        else{p->right=NULL;}
        return p;
    }
    TreeNode* sortedArrayToBST(vector<int>& nums,int l,int r) {
        TreeNode *p;
        //int Len=r-l+1;
        int m=(l+r+1)/2;
        ////if(Len==0){return NULL;}
       // else if(Len==1)
       // {
        //    p=(TreeNode *)malloc(sizeof(TreeNode));//为要插入的节点分配
            //内存空间p指向新插入结点的首地址
       //     p->val=nums[0];
      //      return p;
      //  }
        p=(TreeNode *)malloc(sizeof(TreeNode));//为要插入的节点分配
        //内存空间p指向新插入结点的首地址
        p->val=nums[m];
        if(m-1>=l){
        p->left=sortedArrayToBST(nums,l,m-1);}
        else{p->left=NULL;}
        if(r>=m+1){
        p->right=sortedArrayToBST(nums,m+1,r);}
        else{p->right=NULL;}
        return p;
    }    
};