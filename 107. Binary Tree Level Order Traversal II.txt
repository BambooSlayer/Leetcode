/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        
        vector<vector<int>> vec;
        vector<vector<int>>* vecp=&vec;
        vector<int> v;
        if(root==NULL){}
        else
        {v.push_back(root->val);
        vec.insert(vec.begin(),v);
        Bottom(root, vec.begin(), vecp);}
        //return Bottom(root,vec);//vec;
        return vec;
        ///vec.insert(vec.begin(),Bottom(root));
        ///if(root->left!=NULL && root->right!=NULL){vec.insert(vec.begin(),Bottom(root->left)+Bottom(root->right));}
        ///else if(root->left!=NULL){vec.insert(vec.begin(),Bottom(root->left));}
        ///else if(root->right!=NULL){vec.insert(vec.begin(),Bottom(root->right));}
        
    }
    //vector<vector<int>>  Bottom2(TreeNode* root,) {
    //vector<int>
    vector<vector<int>>::iterator Bottom(TreeNode* root,vector<vector<int>>::iterator beg,vector<vector<int>>* vec) {//尝试用迭代器和指针
        if(root->left!=NULL) {beg=Bottom(root->left, beg, vec);}
        if(root->right!=NULL) {beg=Bottom(root->right, beg, vec);}//加上beg的调整，终于对了
        if(root->left!=NULL || root->right!=NULL)//检查这里！为啥迭代失误 RTE
        {
            vector<int> v;
            //vec.insert(vec.begin(),v);
            if(root->left!=NULL)
            {
                v.push_back(root->left->val);
            }
            if(root->right!=NULL)
            {
                v.push_back(root->right->val);
            }
            (*vec).insert(beg,v);
            beg=(*vec).begin();
            v.clear();
        }
        return beg;
    
    }
};