class Solution {

public:
 //   static bool judge(const pair<int,int> a,const pair<int,int> b){
        //The simplest fix is to make the comparator function be static!
 //   return a.first*a.first+a.second*a.second>b.first*b.first+b.second*b.second;
//}
    int numberOfBoomerangs(vector<pair<int, int>>& points) {
        //pair<int,int> num=points.at(0);
        int L=points.size();
        vector<vector <int> > p(L ,vector<int>(L)); //L-1*L-1的二维vector//vector<int> p;
        
            long a,b;
        //return L;
        for(int i=0;i<L;i++)
        {

            for(int j=i+1;j<L;j++)
            {
                //else if(j<i+1){
                //    a=p.at(j*(L-1)+i-1);
                //    p.push_back(a);
                //}
                //else{
                    a=points.at(i).first-points.at(j).first;
                    b=points.at(i).second-points.at(j).second;
                    p[i][j-1]=a*a+b*b;
                    p[j][i]=p[i][j-1];
                //}
            }
        }
        int sum=0,flag=0;
        for(int i=0;i<L;i++)
        {   
            sort(p[i].begin(),p[i].end());
             for(int j=1;j<L;j++)
            { 
                if(p[i][j-1]==p[i][j]){
                
                    flag++;
                //sum+=(flag);
                //还需要考虑连续多个都相等的组合情况
                }
                else
                {
                    if(flag>0)sum+=flag*(flag+1);
                    flag=0;
                } 
             }
        }
 
        return sum;//num.first;
    }
};